"use strict";(self.webpackChunkoc_studio_docs=self.webpackChunkoc_studio_docs||[]).push([[2716],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(f,s(s({ref:t},u),{},{components:n})):o.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9105:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],i={title:"Context",sidebar_label:"Context"},l=void 0,c={unversionedId:"development/context",id:"development/context",title:"Context",description:"A context object is provided with each call to the handler including the main methods of:",source:"@site/docs/development/context.md",sourceDirName:"development",slug:"/development/context",permalink:"/docs/development/context",draft:!1,editUrl:"https://github.com/xapp-ai/documentation/edit/main/docs/development/context.md",tags:[],version:"current",frontMatter:{title:"Context",sidebar_label:"Context"},sidebar:"docs",previous:{title:"Custom Handlers",permalink:"/docs/development/custom-handlers"},next:{title:"Storage",permalink:"/docs/development/storage"}},u={},d=[{value:"Customizing Context",id:"customizing-context",level:2}],p={toc:d},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A context object is provided with each call to the handler including the main methods of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"public canHandleRequest(request:Request, context: Context): boolean")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"public async handleRequest(request:Request, context: Context): Promise<void>"))),(0,a.kt)("p",null,"The context has access to the response builder, which is used to programmatically build responses, and also the user's long term and session storage.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Context<S extends Storage = Storage> {\n    /**\n     * Long term storage for the user.\n     */\n    storage: S;\n    /**\n     * The response builder.\n     */\n    response: AbstractResponseBuilder;\n    /**\n     * Session data. Gets deleted when session (id) changes)\n     */\n    session?: SessionStore;\n    /**\n     * Services available for the handlers\n     */\n    services: ContextServices;\n    /**\n     * Milliseconds left from the execution (NOTE: infinity if not executing in a lambda)\n     */\n    timeLeftInMillis?(): number;\n\n    // Note: Some fields omitted here for brevity\n}\n")),(0,a.kt)("admonition",{type:"important"},(0,a.kt)("p",{parentName:"admonition"},"Stentor will automatically save ",(0,a.kt)("inlineCode",{parentName:"p"},"context.storage")," to your UserStorageService after each transaction.")),(0,a.kt)("h2",{id:"customizing-context"},"Customizing Context"),(0,a.kt)("p",null,"You may want to add your own data and services to the context for use throughout your custom handlers."),(0,a.kt)("p",null,"First define your updated context.  It must extend the existing context object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import {  Context } from "stentor";\n\nexport interface CustomContext extends Context {\n    foo: number;\n}\n\n')),(0,a.kt)("p",null,"Next, implement the runtime hook ",(0,a.kt)("inlineCode",{parentName:"p"},"postContextCreation")," to modify your context before it is sent to a handler."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'\n// Note we are using CustomContext as the type for the second parameter\nconst postContextCreation = async (request: Request, context: CustomContext): Promise<{ request: Request, context: Context }> => {\n    // Make the modifications to the request and context\n    request.userId = "newID";\n    context.foo = 1\n    // Pass them back out\n    return { request, context };\n};\n\nexport const handler = new Assistant()\n    .withHooks({ postContextCreation })\n    .withUserStorage(new DynamoUserStorage())\n    .withHandlerService(studioService)\n    .withKnowledgeBaseService(studioService, {\n        // Intent ID for your fallback to determine if we call  KnowledgeBase\n        matchIntentId: "InputUnknown",\n        // For KnowledgeBase results we will generate a request with the following ID\n        setIntentId: "OCSearch"\n    })\n    .withHandlers({\n        QuestionAnsweringHandler: QuestionAnsweringHandler\n    })\n    .withChannels([Alexa(), Dialogflow(), LexConnect(), LexV2Channel(), Stentor(nlu)])\n    .lambda();\n\n')),(0,a.kt)("p",null,"Finally, update your handler method signatures to use CustomContext."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\nexport class CustomContextHandler extends AbstractHandler {\n\n    // Use the CustomContext instead of the Context in the method signature \n    public async handleRequest(request: Request, context: CustomContext): Promise<void> {\n        // You now have access to the updated custom fields\n        context.response.say(`${request.userId} ${context.foo}`);\n\n        return;\n    }\n} \n\n")))}f.isMDXComponent=!0}}]);