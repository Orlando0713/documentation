"use strict";(self.webpackChunkoc_studio_docs=self.webpackChunkoc_studio_docs||[]).push([[3823],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,k=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(k,l(l({ref:t},s),{},{components:n})):a.createElement(k,l({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3711:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={title:"OC Studio Starter"},p=void 0,u={unversionedId:"development/starters/oc-studio-starter",id:"development/starters/oc-studio-starter",title:"OC Studio Starter",description:"Features",source:"@site/docs/development/starters/oc-studio-starter.md",sourceDirName:"development/starters",slug:"/development/starters/oc-studio-starter",permalink:"/docs/development/starters/oc-studio-starter",draft:!1,editUrl:"https://github.com/xapp-ai/documentation/edit/main/docs/development/starters/oc-studio-starter.md",tags:[],version:"current",frontMatter:{title:"OC Studio Starter"}},s={},c=[{value:"Features",id:"features",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Setup",id:"setup",level:3},{value:"Create a Lex V2 Instance",id:"create-a-lex-v2-instance",level:3},{value:"Deploy",id:"deploy",level:3},{value:"Updating Lex",id:"updating-lex",level:3},{value:"Setting up Chat Widget",id:"setting-up-chat-widget",level:3},{value:"Updating from Template",id:"updating-from-template",level:3}],d={toc:c},m="wrapper";function k(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Deployed to your environment"),(0,o.kt)("li",{parentName:"ul"},"Lex V2"),(0,o.kt)("li",{parentName:"ul"},"Leverages Studio's Content API for Handler & Knowledgebase content"),(0,o.kt)("li",{parentName:"ul"},"Monorepo")),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AWS Account with administrative access")),(0,o.kt)("h2",{id:"instructions"},"Instructions"),(0,o.kt)("h3",{id:"setup"},"Setup"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Clone a copy of ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/xapp-ai/oc-studio-starter"},"https://github.com/xapp-ai/oc-studio-starter"),' or click "Use this template" on Github'),(0,o.kt)("li",{parentName:"ol"},"From project root:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nvm use")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"yarn install")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"yarn build")))),(0,o.kt)("li",{parentName:"ol"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},".env")," file in ",(0,o.kt)("inlineCode",{parentName:"li"},"packages/oc-studio-starter")," with your APP ID from Studio for the app you are going to deploy.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/development/development-faqs#how-do-i-find-my-application-id"},"How do you find your application ID?"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"AWS_REGION=us-east-1\nSTUDIO_APP_ID=\nSTUDIO_TOKEN=\nLEX_BOT_ID=\nLEX_BOT_ALIAS_ID=TSTALIASID\nUSER_STORAGE_TABLE=\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Add a ",(0,o.kt)("inlineCode",{parentName:"li"},"STUDIO_TOKEN"),", found in Studio under your app's Developer --\x3e Tokens ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/development/tokens"},"Tokens"))))),(0,o.kt)("h3",{id:"create-a-lex-v2-instance"},"Create a Lex V2 Instance"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new Lex bot (v2)"),(0,o.kt)("li",{parentName:"ol"},"When you create a new bot in the console, it automatically adds a Fallback Intent."),(0,o.kt)("li",{parentName:"ol"},"Update your .env file with the bot ID: ",(0,o.kt)("inlineCode",{parentName:"li"},"LEX_BOT_ID="),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"You can find it when you first click on the bot name."))),(0,o.kt)("li",{parentName:"ol"},"Update your .env file with the alias ID for the TestBotAlias: ",(0,o.kt)("inlineCode",{parentName:"li"},"LEX_BOT_ALIAS_ID=")," ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Within your bot, look under Deployment --\x3e Aliases, then select TestBotAlias"),(0,o.kt)("li",{parentName:"ul"},"It should be ",(0,o.kt)("inlineCode",{parentName:"li"},"TSTALIASID")," if you copy and pasted from above, this is a constant.")))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You should only have one item left in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," not filled out at this point, the ",(0,o.kt)("inlineCode",{parentName:"p"},"USER_STORAGE_TABLE"),", that will be complete after the deployment.")),(0,o.kt)("h3",{id:"deploy"},"Deploy"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Navigate to the root of the runtime package:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd packages/app\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Set your AWS_PROFILE to one that has necessary credentials to launch the stack:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export AWS_PROFILE=your-profile\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Deploy to your desired stage, either staging or production:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy:prod\n")),(0,o.kt)("p",null,"A successfull deployment will look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn run v1.22.19\n$ rimraf ./lib && yarn build && serverless deploy --stage production\n$ tsc -d true -p .\n\nDeploying studio-runtime to stage production (us-east-1)\nCleaning dependency symlinks\nCreating dependency symlinks\n\n\u2714 Service deployed to stack all-pro-plumbing-app-production (142s)\n\nendpoints:\n  POST - https://{cloudfront-id}.execute-api.us-east-1.amazonaws.com/production/\n  POST - https://{cloudfront-id}.execute-api.us-east-1.amazonaws.com/production/{proxy+}\nfunctions:\n  app: studio-runtime-{appId}-app-production (46 MB)\n\n2 deprecations found: run 'serverless doctor' for more details\n\nMonitor all your API routes with Serverless Console: run \"serverless --console\"\nDone in 152.19s.\n")),(0,o.kt)("p",null,"Your new endpoint for your assistant application will be under ",(0,o.kt)("inlineCode",{parentName:"p"},"endpoints")," and your main runtime lambda is under ",(0,o.kt)("inlineCode",{parentName:"p"},"functions"),"."),(0,o.kt)("p",null,"The first ",(0,o.kt)("inlineCode",{parentName:"p"},"endpoint")," (without the /{proxy+}) is how you can interact with your newly created assistant and is what you will use when you setup chat and search widgets."),(0,o.kt)("h3",{id:"updating-lex"},"Updating Lex"),(0,o.kt)("p",null,"With the XAPP CLI, push your model to your Lex bot"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"xapp push -p l2 -a {appId} --botName {bot-name}\n")),(0,o.kt)("h3",{id:"setting-up-chat-widget"},"Setting up Chat Widget"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a chat widget or navigate to an existing chat widget"),(0,o.kt)("li",{parentName:"ol"},"Click the connection icon from the chat widget menu"),(0,o.kt)("li",{parentName:"ol"},"Paste the first endpoint URL from the output of your cloudformation script."),(0,o.kt)("li",{parentName:"ol"},'Make sure you select the checkbox next to "Direct"'),(0,o.kt)("li",{parentName:"ol"},"Save and test")),(0,o.kt)("h3",{id:"updating-from-template"},"Updating from Template"),(0,o.kt)("p",null,"We will make updates to the template and you may want to merge them in to your project.  This process is a bit manual but the following will allow you to then manually go through all the changes and accept/reject them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git remote add template git@github.com:xapp-ai/oc-studio-starter.git\n")),(0,o.kt)("p",null,"Fetch updates"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git fetch --all\n")),(0,o.kt)("p",null,"The merge"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git merge template/main --allow-unrelated-histories\n")))}k.isMDXComponent=!0}}]);